from rest_framework import generics, status, viewsets
from rest_framework.decorators import api_view, action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q, Count, Avg
from django.http import JsonResponse, HttpResponse
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login
from django.views.generic import TemplateView
import uuid
import json
import asyncio
import logging
import requests
import urllib.parse

from .models import (
    ChatSession, ChatMessage, UserProfile, ChatTemplate, 
    ChatExport, UserStatistics
)
from .serializers import (
    ChatSessionSerializer, ChatSessionListSerializer, ChatMessageSerializer,
    UserProfileSerializer, ChatTemplateSerializer, ChatExportSerializer,
    UserStatisticsSerializer, ChatRequestSerializer, ChatResponseSerializer,
    ProviderInfoSerializer
)
from .gpt_service import gpt_service
from django.conf import settings

logger = logging.getLogger(__name__)

class IndexView(TemplateView):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    template_name = 'index.html'
    
    def get(self, request, *args, **kwargs):
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not request.session.get('session_id'):
            session_id = str(uuid.uuid4())
            request.session['session_id'] = session_id
            request.session.save()
            logger.info(f"Created new session: {session_id}")
        
        return super().get(request, *args, **kwargs)

@api_view(['GET'])
def provider_info(request):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö GPT"""
    try:
        info = gpt_service.get_provider_info()
        serializer = ProviderInfoSerializer(info)
        return Response(serializer.data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö: {str(e)}")
        return Response({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@csrf_exempt
def chat_message(request):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT"""
    try:
        serializer = ChatRequestSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
        data = serializer.validated_data
        message = data['message']
        session_id = data.get('session_id')
        model = data.get('model', 'gpt-3.5-turbo')
        provider = data.get('provider')
        providers = data.get('providers', [])  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        include_history = data.get('include_history', True)
        max_history = data.get('max_history', 50)
        image_data = data.get('image_data')  # –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        if session_id:
            try:
                session = ChatSession.objects.get(session_id=session_id)
            except ChatSession.DoesNotExist:
                session = ChatSession.objects.create(
                    session_id=session_id,
                    user=request.user if request.user.is_authenticated else None
                )
        else:
            session_id = str(uuid.uuid4())
            session = ChatSession.objects.create(
                session_id=session_id,
                user=request.user if request.user.is_authenticated else None,
                title=message[:50] + "..." if len(message) > 50 else message
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = ChatMessage.objects.create(
            session=session,
            message_type='user',
            content=message
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        conversation_history = []
        if include_history:
            history_messages = session.messages.order_by('created_at')[:max_history * 2]
            for msg in history_messages:
                if msg.message_type == 'user':
                    conversation_history.append({
                        'message': msg.content,
                        'response': None
                    })
                elif msg.message_type == 'assistant' and conversation_history:
                    conversation_history[-1]['response'] = msg.content
        
        # –ú–µ–Ω—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if provider and provider != 'null':
            gpt_service.change_provider(provider)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        if providers:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT: {message[:100]}... | –ú–æ–¥–µ–ª—å: {model} | –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {providers} | –¢–µ–∫—É—â–∏–π: {provider} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if image_data else '–ù–µ—Ç'}")
        elif provider and provider != 'null':
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT: {message[:100]}... | –ú–æ–¥–µ–ª—å: {model} | –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider} | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if image_data else '–ù–µ—Ç'}")
        else:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT: {message[:100]}... | –†–µ–∂–∏–º: –ê–≤—Ç–æ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä) | –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if image_data else '–ù–µ—Ç'}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º vision –º–æ–¥–µ–ª—å –∏ –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        if image_data:
            model_to_use = 'gpt-4-vision-preview'
            # –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            vision_providers = [
                'Free2GPT',           # 1.2—Å - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π!
                'Qwen_Qwen_2_5',      # 2.9—Å - –Ω–∞–¥–µ–∂–Ω—ã–π
                'Qwen_Qwen_2_72B',    # 5.2—Å - –º–æ—â–Ω—ã–π  
                'Qwen_Qwen_2_5_Max'   # 5.5—Å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
            ]
            providers_to_use = vision_providers
            logger.info(f"üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–û–í–ï–†–ï–ù–ù–´–ï vision –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {model_to_use} | –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {providers_to_use}")
        else:
            model_to_use = model if model and model != 'null' else None
            providers_to_use = providers if providers else None
        
        gpt_response = gpt_service.get_response_sync(message, conversation_history, model_to_use, providers_to_use, image_data)
        
        if gpt_response.get('success'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant_message = ChatMessage.objects.create(
                session=session,
                message_type='assistant',
                content=gpt_response['response'],
                raw_content=gpt_response.get('raw_response', ''),
                provider_used=gpt_response.get('provider_used', ''),
                model_used=gpt_response.get('model_used', model),
                response_time=gpt_response.get('response_time'),
                attempt_number=gpt_response.get('attempt_number')
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if request.user.is_authenticated:
                profile, created = UserProfile.objects.get_or_create(user=request.user)
                profile.total_messages += 2  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
                profile.save()
                
                stats, created = UserStatistics.objects.get_or_create(user=request.user)
                stats.messages_today += 2
                stats.total_characters += len(message) + len(gpt_response['response'])
                stats.save()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_data = ChatResponseSerializer({
                'success': True,
                'response': gpt_response['response'],
                'raw_response': gpt_response.get('raw_response', ''),
                'model_used': gpt_response.get('model_used', model),
                'provider_used': gpt_response.get('provider_used', ''),
                'attempt_number': gpt_response.get('attempt_number', 1),
                'response_time': gpt_response.get('response_time', 0),
                'message_length': len(message),
                'history_length': len(conversation_history),
                'session_id': session.session_id,
                'message_id': assistant_message.id
            }).data
            
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {gpt_response.get('provider_used', 'unknown')}")
            return Response(response_data)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            error_message = ChatMessage.objects.create(
                session=session,
                message_type='system',
                content=f"–û—à–∏–±–∫–∞: {gpt_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                raw_content=str(gpt_response)
            )
            
            logger.error(f"–û—à–∏–±–∫–∞ GPT: {gpt_response.get('error')}")
            return Response({
                'success': False,
                'error': gpt_response.get('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞'),
                'response': gpt_response.get('response', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'),
                'session_id': session.session_id,
                'total_attempts': gpt_response.get('total_attempts', 0)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chat_message: {str(e)}")
        return Response({
            'success': False,
            'error': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'details': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ChatSessionViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ —á–∞—Ç–∞"""
    serializer_class = ChatSessionSerializer
    permission_classes = [AllowAny]  # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø
    
    def get_queryset(self):
        if self.request.user.is_authenticated:
            return ChatSession.objects.filter(user=self.request.user)
        else:
            # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ session_id –∏–∑ –∫—É–∫–∏
            session_ids = self.request.COOKIES.get('chat_sessions', '').split(',')
            return ChatSession.objects.filter(session_id__in=session_ids)
    
    def get_serializer_class(self):
        if self.action == 'list':
            return ChatSessionListSerializer
        return ChatSessionSerializer
    
    @action(detail=True, methods=['post'])
    def rename(self, request, pk=None):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é"""
        session = self.get_object()
        new_title = request.data.get('title', '').strip()
        if new_title:
            session.title = new_title
            session.save()
            return Response({'success': True, 'title': session.title})
        return Response({'error': '–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'}, status=status.HTTP_400_BAD_REQUEST)
    
    @action(detail=True, methods=['delete'])
    def clear(self, request, pk=None):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏"""
        session = self.get_object()
        session.messages.all().delete()
        return Response({'success': True})

class ChatMessageViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞"""
    serializer_class = ChatMessageSerializer
    permission_classes = [AllowAny]
    
    def get_queryset(self):
        session_id = self.request.query_params.get('session_id')
        if session_id:
            try:
                session = ChatSession.objects.get(session_id=session_id)
                return session.messages.all()
            except ChatSession.DoesNotExist:
                return ChatMessage.objects.none()
        return ChatMessage.objects.none()

class UserProfileViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    serializer_class = UserProfileSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return UserProfile.objects.filter(user=self.request.user)

class ChatTemplateViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —á–∞—Ç–∞"""
    serializer_class = ChatTemplateSerializer
    permission_classes = [AllowAny]
    
    def get_queryset(self):
        return ChatTemplate.objects.filter(is_public=True)
    
    @action(detail=True, methods=['post'])
    def use(self, request, pk=None):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω"""
        template = self.get_object()
        template.usage_count += 1
        template.save()
        return Response({'content': template.content})

@api_view(['GET'])
def user_statistics(request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not request.user.is_authenticated:
        return Response({'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, status=status.HTTP_401_UNAUTHORIZED)
    
    try:
        stats, created = UserStatistics.objects.get_or_create(user=request.user)
        serializer = UserStatisticsSerializer(stats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        additional_stats = {
            'total_sessions': ChatSession.objects.filter(user=request.user).count(),
            'active_sessions': ChatSession.objects.filter(user=request.user, is_active=True).count(),
            'total_messages': ChatMessage.objects.filter(session__user=request.user).count(),
            'favorite_messages': ChatMessage.objects.filter(session__user=request.user, is_favorite=True).count(),
        }
        
        data = serializer.data
        data.update(additional_stats)
        
        return Response(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@csrf_exempt
def export_chat(request):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç"""
    try:
        session_id = request.data.get('session_id')
        format = request.data.get('format', 'json')
        
        if not session_id:
            return Response({'error': '–ù–µ —É–∫–∞–∑–∞–Ω session_id'}, status=status.HTTP_400_BAD_REQUEST)
        
        session = get_object_or_404(ChatSession, session_id=session_id)
        messages = session.messages.all().order_by('created_at')
        
        if format == 'json':
            data = {
                'session': {
                    'id': str(session.id),
                    'session_id': session.session_id,
                    'title': session.title,
                    'created_at': session.created_at.isoformat(),
                    'updated_at': session.updated_at.isoformat()
                },
                'messages': [
                    {
                        'id': str(msg.id),
                        'type': msg.message_type,
                        'content': msg.content,
                        'created_at': msg.created_at.isoformat(),
                        'provider': msg.provider_used,
                        'response_time': msg.response_time
                    }
                    for msg in messages
                ]
            }
            
            response = HttpResponse(
                json.dumps(data, ensure_ascii=False, indent=2),
                content_type='application/json; charset=utf-8'
            )
            response['Content-Disposition'] = f'attachment; filename="chat_{session.session_id[:8]}.json"'
            return response
            
        elif format == 'txt':
            content = f"–ß–∞—Ç: {session.title}\n"
            content += f"–°–æ–∑–¥–∞–Ω: {session.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            content += "=" * 50 + "\n\n"
            
            for msg in messages:
                if msg.message_type == 'user':
                    content += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({msg.created_at.strftime('%H:%M:%S')}):\n{msg.content}\n\n"
                elif msg.message_type == 'assistant':
                    content += f"ChatGPT ({msg.created_at.strftime('%H:%M:%S')}):\n{msg.content}\n\n"
            
            response = HttpResponse(content, content_type='text/plain; charset=utf-8')
            response['Content-Disposition'] = f'attachment; filename="chat_{session.session_id[:8]}.txt"'
            return response
        
        else:
            return Response({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç'}, status=status.HTTP_400_BAD_REQUEST)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —á–∞—Ç–∞: {str(e)}")
        return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@csrf_exempt
def clear_all_chats(request):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã"""
    try:
        if request.user.is_authenticated:
            # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            ChatSession.objects.filter(user=request.user).delete()
        else:
            # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –∏–∑ –∫—É–∫–∏
            session_ids = request.data.get('session_ids', [])
            if session_ids:
                ChatSession.objects.filter(session_id__in=session_ids).delete()
        
        return Response({'success': True, 'message': '–í—Å–µ —á–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤: {str(e)}")
        return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
def change_provider(request):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ GPT"""
    try:
        provider_name = request.data.get('provider')
        if not provider_name:
            return Response({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä'}, status=status.HTTP_400_BAD_REQUEST)
        
        success = gpt_service.change_provider(provider_name)
        if success:
            return Response({
                'success': True,
                'current_provider': gpt_service.get_current_provider(),
                'message': f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {provider_name}'
            })
        else:
            return Response({'error': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_400_BAD_REQUEST)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}")
        return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@csrf_exempt
def generate_image(request):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        prompt = request.data.get('prompt')
        provider = request.data.get('provider')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        
        if not prompt:
            return Response({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
        if len(prompt) > 500:
            return Response({
                'success': False,
                'error': '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        logger.info(f"[IMAGE_API] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{prompt[:50]}...'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(gpt_service.generate_image(prompt, provider))
        finally:
            loop.close()
        
        if result['success']:
            logger.info(f"[IMAGE_API] SUCCESS! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {result['provider']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ChatMessage –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            
            return Response({
                'success': True,
                'image_url': result.get('image_url'),
                'image_data': result.get('image_data'),
                'provider_used': result['provider'],
                'response_time': result['response_time'],
                'prompt': result['prompt']
            })
        else:
            logger.warning(f"[IMAGE_API] ERROR! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            return Response({
                'success': False,
                'error': result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
                'message': result.get('message', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ'),
                'quota_errors': result.get('quota_errors', []),
                'providers_tried': result.get('providers_tried', [])
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    except Exception as e:
        logger.error(f"[IMAGE_API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return Response({
            'success': False,
            'error': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# Google OAuth Views
@api_view(['GET'])
def google_auth_init(request):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google OAuth"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è OAuth URL
        params = {
            'client_id': settings.GOOGLE_CLIENT_ID,
            'redirect_uri': settings.GOOGLE_OAUTH_CONFIG['redirect_uri'],
            'scope': settings.GOOGLE_OAUTH_CONFIG['scope'],
            'response_type': settings.GOOGLE_OAUTH_CONFIG['response_type'],
            'access_type': settings.GOOGLE_OAUTH_CONFIG['access_type'],
            'prompt': settings.GOOGLE_OAUTH_CONFIG['prompt']
        }
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url = f"https://accounts.google.com/o/oauth2/v2/auth?{urllib.parse.urlencode(params)}"
        
        return Response({
            'success': True,
            'auth_url': auth_url
        })
        
    except Exception as e:
        logger.error(f"Google Auth Init Error: {str(e)}")
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google OAuth'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
def google_auth_callback(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç Google"""
    try:
        code = request.GET.get('code')
        if not code:
            return JsonResponse({
                'success': False,
                'error': '–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω'
            })
        
        # –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        token_data = {
            'client_id': settings.GOOGLE_CLIENT_ID,
            'client_secret': settings.GOOGLE_CLIENT_SECRET,
            'code': code,
            'grant_type': 'authorization_code',
            'redirect_uri': settings.GOOGLE_OAUTH_CONFIG['redirect_uri']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        token_response = requests.post(settings.GOOGLE_TOKEN_URL, data=token_data)
        token_json = token_response.json()
        
        if 'access_token' not in token_json:
            logger.error(f"Google Token Error: {token_json}")
            return JsonResponse({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
            })
        
        access_token = token_json['access_token']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_response = requests.get(
            settings.GOOGLE_USER_INFO_URL,
            headers={'Authorization': f'Bearer {access_token}'}
        )
        user_data = user_response.json()
        
        if 'email' not in user_data:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
            })
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        email = user_data['email']
        name = user_data.get('name', email.split('@')[0])
        picture = user_data.get('picture', '')
        
        user, created = User.objects.get_or_create(
            username=email,
            defaults={
                'email': email,
                'first_name': name.split(' ')[0] if ' ' in name else name,
                'last_name': name.split(' ', 1)[1] if ' ' in name else ''
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile, profile_created = UserProfile.objects.get_or_create(
            user=user,
            defaults={
                'google_id': user_data.get('id', ''),
                'google_picture': picture,
                'display_name': name
            }
        )
        
        if not profile_created:
            profile.google_id = user_data.get('id', '')
            profile.google_picture = picture
            profile.display_name = name
            profile.save()
        
        # –í—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
        login(request, user)
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        return redirect('/?google_auth=success')
        
    except Exception as e:
        logger.error(f"Google Auth Callback Error: {str(e)}")
        return redirect('/?google_auth=error')


@api_view(['POST'])
def google_logout(request):
    """–í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ Django —Å–µ—Å—Å–∏–∏
        from django.contrib.auth import logout
        logout(request)
        
        return Response({
            'success': True,
            'message': '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'
        })
        
    except Exception as e:
        logger.error(f"Google Logout Error: {str(e)}")
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
def user_auth_status(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if request.user.is_authenticated:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile, created = UserProfile.objects.get_or_create(
                user=request.user,
                defaults={
                    'display_name': request.user.first_name + ' ' + request.user.last_name if request.user.first_name else request.user.username
                }
            )
            
            return Response({
                'authenticated': True,
                'user': {
                    'username': request.user.username,
                    'email': request.user.email,
                    'first_name': request.user.first_name,
                    'last_name': request.user.last_name,
                },
                'profile': {
                    'google_id': profile.google_id,
                    'google_picture': profile.google_picture,
                    'display_name': profile.display_name,
                }
            })
        else:
            return Response({
                'authenticated': False
            })
            
    except Exception as e:
        logger.error(f"User Auth Status Error: {str(e)}")
        return Response({
            'authenticated': False,
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['DELETE'])
def delete_all_chats(request):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_401_UNAUTHORIZED)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_chats = ChatSession.objects.filter(session_id=session_id)
        chats_count = user_chats.count()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç—ã
        for chat in user_chats:
            chat.messages.all().delete()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_chats.delete()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã
        
        logger.info(f"Deleted {chats_count} chats for session {session_id}")
        
        return Response({
            'success': True,
            'message': f'–£–¥–∞–ª–µ–Ω–æ {chats_count} —á–∞—Ç–æ–≤',
            'deleted_chats': chats_count
        })
        
    except Exception as e:
        logger.error(f"Delete all chats error: {str(e)}")
        return Response({
            'success': False,
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['DELETE'])
def delete_account(request):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_401_UNAUTHORIZED)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_profile = UserProfile.objects.get(session_id=session_id)
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'error': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_chats = ChatSession.objects.filter(session_id=session_id)
        chats_count = user_chats.count()
        
        for chat in user_chats:
            chat.messages.all().delete()
        user_chats.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        UserStatistics.objects.filter(session_id=session_id).delete()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = user_profile.email
        user_profile.delete()
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        request.session.flush()
        
        logger.info(f"Deleted account for session {session_id}, email: {user_email}")
        
        return Response({
            'success': True,
            'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
            'deleted_chats': chats_count,
            'deleted_email': user_email
        })
        
    except Exception as e:
        logger.error(f"Delete account error: {str(e)}")
        return Response({
            'success': False,
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# Notion Integration Views
@api_view(['POST'])
def test_notion_connection(request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Notion API"""
    try:
        from .notion_service import NotionService
        
        api_key = request.data.get('api_key')
        if not api_key:
            return Response({
                'success': False,
                'error': 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        notion_service = NotionService(api_key, use_proxy=True)
        result = notion_service.test_connection()
        
        return Response(result)
        
    except Exception as e:
        logger.error(f"Notion connection test error: {str(e)}")
        return Response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
def save_notion_settings(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        from .models import NotionIntegration
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        api_key = request.data.get('api_key')
        is_enabled = request.data.get('is_enabled', False)
        selected_page_id = request.data.get('selected_page_id')
        selected_page_title = request.data.get('selected_page_title')
        
        if not api_key:
            return Response({
                'success': False,
                'error': 'API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_401_UNAUTHORIZED)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Å—Å–∏–∏
        user, created = User.objects.get_or_create(
            username=f"session_{session_id}",
            defaults={'email': f"{session_id}@temp.local"}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration, created = NotionIntegration.objects.get_or_create(
            user=user,
            defaults={
                'api_key': api_key,
                'is_enabled': is_enabled,
                'selected_page_id': selected_page_id,
                'selected_page_title': selected_page_title
            }
        )
        
        if not created:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            integration.api_key = api_key
            integration.is_enabled = is_enabled
            if selected_page_id:
                integration.selected_page_id = selected_page_id
                integration.selected_page_title = selected_page_title
            integration.save()
        
        return Response({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
        })
        
    except Exception as e:
        logger.error(f"Save Notion settings error: {str(e)}")
        return Response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
def get_notion_settings(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        from .models import NotionIntegration
        
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'is_enabled': False,
                'has_api_key': False
            })
        
        try:
            user = User.objects.get(username=f"session_{session_id}")
            integration = NotionIntegration.objects.get(user=user)
            
            return Response({
                'is_enabled': integration.is_enabled,
                'has_api_key': bool(integration.api_key),
                'total_saves': integration.total_saves,
                'last_save_date': integration.last_save_date
            })
            
        except (User.DoesNotExist, NotionIntegration.DoesNotExist):
            return Response({
                'is_enabled': False,
                'has_api_key': False
            })
        
    except Exception as e:
        logger.error(f"Get Notion settings error: {str(e)}")
        return Response({
            'is_enabled': False,
            'has_api_key': False,
            'error': str(e)
        })

@api_view(['POST'])
def save_to_notion(request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Notion"""
    try:
        from .models import NotionIntegration, ChatMessage
        from .notion_service import NotionService
        
        message_id = request.data.get('message_id')
        if not message_id:
            return Response({
                'success': False,
                'error': 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_401_UNAUTHORIZED)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        try:
            user = User.objects.get(username=f"session_{session_id}")
            integration = NotionIntegration.objects.get(user=user, is_enabled=True)
        except (User.DoesNotExist, NotionIntegration.DoesNotExist):
            return Response({
                'success': False,
                'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = ChatMessage.objects.get(id=message_id)
        except ChatMessage.DoesNotExist:
            return Response({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –ò–ò
        if message.message_type != 'assistant':
            return Response({
                'success': False,
                'error': '–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –ò–ò'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Notion –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        notion_service = NotionService(integration.api_key, use_proxy=True)
        success = notion_service.save_message_to_notion(integration, message)
        
        if success:
            return Response({
                'success': True,
                'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Notion'
            })
        else:
            return Response({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Notion'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    except Exception as e:
        logger.error(f"Save to Notion error: {str(e)}")
        return Response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
def get_notion_pages(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion"""
    try:
        from .notion_service import NotionService
        
        api_key = request.data.get('api_key')
        if not api_key:
            return Response({
                'success': False,
                'error': 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        notion_service = NotionService(api_key, use_proxy=True)
        result = notion_service.get_available_pages()
        
        return Response(result)
        
    except Exception as e:
        logger.error(f"Get Notion pages error: {str(e)}")
        return Response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST']) 
def select_notion_page(request):
    """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    try:
        from .models import NotionIntegration
        
        page_id = request.data.get('page_id')
        page_title = request.data.get('page_title', '')
        
        if not page_id:
            return Response({
                'success': False,
                'error': 'ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        session_id = request.session.get('session_id')
        if not session_id:
            return Response({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_401_UNAUTHORIZED)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        try:
            user = User.objects.get(username=f"session_{session_id}")
            integration = NotionIntegration.objects.get(user=user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            integration.selected_page_id = page_id
            integration.selected_page_title = page_title
            integration.save()
            
            return Response({
                'success': True,
                'message': f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ "{page_title}" –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
            })
            
        except (User.DoesNotExist, NotionIntegration.DoesNotExist):
            return Response({
                'success': False,
                'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_404_NOT_FOUND)
        
    except Exception as e:
        logger.error(f"Select Notion page error: {str(e)}")
        return Response({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
def save_message_to_notion_view(request):
    """View –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Notion"""
    import json
    
    try:
        data = json.loads(request.body)
        content = data.get('content')
        message_id = data.get('message_id')
        
        if not content:
            return JsonResponse({
                'success': False,
                'error': '–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        session_id = request.session.get('session_id')
        if not session_id:
            return JsonResponse({
                'success': False,
                'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            })
        
        try:
            from .models import NotionIntegration
            from django.contrib.auth.models import User
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º username = session_{session_id})
            try:
                user = User.objects.get(username=f"session_{session_id}")
            except User.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
            try:
                notion_integration = NotionIntegration.objects.get(user=user)
            except NotionIntegration.DoesNotExist:
                return JsonResponse({
                    'success': False,
                    'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
                })
            
            if not notion_integration.is_enabled:
                return JsonResponse({
                    'success': False,
                    'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –æ—Ç–∫–ª—é—á–µ–Ω–∞'
                })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º NotionService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from .notion_service import NotionService
            
            notion_service = NotionService(notion_integration.api_key, use_proxy=True)
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from .models import ChatMessage
            from datetime import datetime
            import uuid
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ message_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if message_id:
                try:
                    message = ChatMessage.objects.get(id=message_id)
                except ChatMessage.DoesNotExist:
                    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = ChatMessage(
                        id=message_id,
                        content=content,
                        message_type='assistant',
                        created_at=datetime.now()
                    )
            else:
                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = ChatMessage(
                    id=str(uuid.uuid4()),
                    content=content,
                    message_type='assistant',
                    created_at=datetime.now()
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Notion
            result = notion_service.save_message_to_notion(notion_integration, message)
            
            if result:
                return JsonResponse({
                    'success': True,
                    'message': '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Notion'
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Notion'
                })
                
        except Exception as e:
            logger.error(f"Error saving message to Notion: {str(e)}")
            return JsonResponse({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}'
            })
            
    except json.JSONDecodeError:
        return JsonResponse({
            'success': False,
            'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON'
        })
    except Exception as e:
        logger.error(f"Save message to Notion error: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        })

